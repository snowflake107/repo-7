"use strict";(self.webpackChunkcosmos_sdk_docs=self.webpackChunkcosmos_sdk_docs||[]).push([[51735],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>b});var o=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=o.createContext({}),l=function(e){var t=o.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},c=function(e){var t=l(e.components);return o.createElement(i.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(r),m=n,b=d["".concat(i,".").concat(m)]||d[m]||u[m]||a;return r?o.createElement(b,p(p({ref:t},c),{},{components:r})):o.createElement(b,p({ref:t},c))}));function b(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,p=new Array(a);p[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[d]="string"==typeof e?e:n,p[1]=s;for(var l=2;l<a;l++)p[l]=r[l];return o.createElement.apply(null,p)}return o.createElement.apply(null,r)}m.displayName="MDXCreateElement"},80077:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>p,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var o=r(87462),n=(r(67294),r(3905));const a={},p="Process Proposal",s={unversionedId:"build/abci/process-proposal",id:"build/abci/process-proposal",title:"Process Proposal",description:"ProcessProposal handles the validation of a proposal from PrepareProposal,",source:"@site/docs/build/abci/02-process-proposal.md",sourceDirName:"build/abci",slug:"/build/abci/process-proposal",permalink:"/main/build/abci/process-proposal",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"buildSidebar",previous:{title:"Prepare Proposal",permalink:"/main/build/abci/prepare-proposal"},next:{title:"Vote Extensions",permalink:"/main/build/abci/vote-extensions"}},i={},l=[],c={toc:l},d="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(d,(0,o.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"process-proposal"},"Process Proposal"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"ProcessProposal")," handles the validation of a proposal from ",(0,n.kt)("inlineCode",{parentName:"p"},"PrepareProposal"),",\nwhich also includes a block header. Meaning, that after a block has been proposed\nthe other validators have the right to accept or reject that block. The validator in the\ndefault implementation of ",(0,n.kt)("inlineCode",{parentName:"p"},"PrepareProposal")," runs basic validity checks on each\ntransaction."),(0,n.kt)("p",null,"Note, ",(0,n.kt)("inlineCode",{parentName:"p"},"ProcessProposal")," MAY NOT be non-deterministic, i.e. it must be deterministic.\nThis means if ",(0,n.kt)("inlineCode",{parentName:"p"},"ProcessProposal")," panics or fails and we reject, all honest validator\nprocesses should reject (i.e., prevote nil). If so, then CometBFT will start a new round with a new block proposal, and the same cycle will happen with ",(0,n.kt)("inlineCode",{parentName:"p"},"PrepareProposal"),"\nand ",(0,n.kt)("inlineCode",{parentName:"p"},"ProcessProposal")," for the new proposal."),(0,n.kt)("p",null,"Here is the implementation of the default implementation:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.52.0-beta.1/baseapp/abci_utils.go#L224-L231\n")),(0,n.kt)("p",null,"Like ",(0,n.kt)("inlineCode",{parentName:"p"},"PrepareProposal")," this implementation is the default and can be modified by\nthe application developer in ",(0,n.kt)("a",{parentName:"p",href:"https://docs.cosmos.network/main/build/building-apps/app-go-di"},(0,n.kt)("inlineCode",{parentName:"a"},"app_di.go")),". If you decide to implement\nyour own ",(0,n.kt)("inlineCode",{parentName:"p"},"ProcessProposal")," handler, you must ensure that the transactions\nprovided in the proposal DO NOT exceed the maximum block gas and ",(0,n.kt)("inlineCode",{parentName:"p"},"maxtxbytes")," (if set)."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"processOpt := func(app *baseapp.BaseApp) {\n    abciPropHandler := baseapp.NewDefaultProposalHandler(mempool, app)\n    app.SetProcessProposal(abciPropHandler.ProcessProposalHandler())\n}\n\nbaseAppOptions = append(baseAppOptions, processOpt)\n")))}u.isMDXComponent=!0}}]);