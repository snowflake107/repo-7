"use strict";(self.webpackChunkcosmos_sdk_docs=self.webpackChunkcosmos_sdk_docs||[]).push([[70854],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(n),c=o,h=u["".concat(l,".").concat(c)]||u[c]||d[c]||i;return n?a.createElement(h,r(r({ref:t},m),{},{components:n})):a.createElement(h,r({ref:t},m))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,r[1]=s;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},99030:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const i={sidebar_position:1},r="Module Simulation",s={unversionedId:"build/building-modules/simulator",id:"build/building-modules/simulator",title:"Module Simulation",description:"* Cosmos Blockchain Simulator",source:"@site/docs/build/building-modules/14-simulator.md",sourceDirName:"build/building-modules",slug:"/build/building-modules/simulator",permalink:"/main/build/building-modules/simulator",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"buildSidebar",previous:{title:"Upgrading Modules",permalink:"/main/build/building-modules/upgrade"},next:{title:"Modules depinject-ready",permalink:"/main/build/building-modules/depinject"}},l={},p=[{value:"Synopsis",id:"synopsis",level:2},{value:"Simulation package",id:"simulation-package",level:2},{value:"Store decoders",id:"store-decoders",level:3},{value:"Randomized genesis",id:"randomized-genesis",level:3},{value:"Random weighted operations",id:"random-weighted-operations",level:3},{value:"Random proposal contents",id:"random-proposal-contents",level:3},{value:"Registering simulation functions",id:"registering-simulation-functions",level:2},{value:"App Simulator manager",id:"app-simulator-manager",level:2},{value:"Integration with the Go fuzzer framework",id:"integration-with-the-go-fuzzer-framework",level:2}],m={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"module-simulation"},"Module Simulation"),(0,o.kt)("admonition",{title:"Pre-requisite Readings",type:"note"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/main/learn/advanced/simulation"},"Cosmos Blockchain Simulator")))),(0,o.kt)("h2",{id:"synopsis"},"Synopsis"),(0,o.kt)("p",null,"This document details how to define each module simulation functions to be\nintegrated with the application ",(0,o.kt)("inlineCode",{parentName:"p"},"SimulationManager"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#simulation-package"},"Simulation package"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#store-decoders"},"Store decoders")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#randomized-genesis"},"Randomized genesis")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#random-weighted-operations"},"Random weighted operations")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#random-proposal-contents"},"Random proposal contents")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#registering-simulation-functions"},"Registering simulation functions")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#app-simulator-manager"},"App Simulator manager"))),(0,o.kt)("h2",{id:"simulation-package"},"Simulation package"),(0,o.kt)("p",null,"Every module that implements the Cosmos SDK simulator needs to have a ",(0,o.kt)("inlineCode",{parentName:"p"},"x/<module>/simulation"),"\npackage which contains the primary functions required by the fuzz tests: store\ndecoders, randomized genesis state and parameters, weighted operations and proposal\ncontents."),(0,o.kt)("h3",{id:"store-decoders"},"Store decoders"),(0,o.kt)("p",null,"Registering the store decoders is required for the ",(0,o.kt)("inlineCode",{parentName:"p"},"AppImportExport"),". This allows\nfor the key-value pairs from the stores to be decoded (",(0,o.kt)("em",{parentName:"p"},"i.e")," unmarshalled)\nto their corresponding types. In particular, it matches the key to a concrete type\nand then unmarshals the value from the ",(0,o.kt)("inlineCode",{parentName:"p"},"KVPair")," to the type provided."),(0,o.kt)("p",null,"You can use the example ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/blob/main/x/distribution/simulation/decoder.go"},"here")," from the distribution module to implement your store decoders."),(0,o.kt)("p",null,"If the module uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"collections")," package, you can use the example ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/blob/23cf89cce1882ba9c8280e64735ae200504bfdce/x/bank/module.go#L166"},"here")," from the Bank module to implement your store decoders."),(0,o.kt)("h3",{id:"randomized-genesis"},"Randomized genesis"),(0,o.kt)("p",null,"The simulator tests different scenarios and values for genesis parameters\nin order to fully test the edge cases of specific modules. The ",(0,o.kt)("inlineCode",{parentName:"p"},"simulator")," package from each module must expose a ",(0,o.kt)("inlineCode",{parentName:"p"},"RandomizedGenState")," function to generate the initial random ",(0,o.kt)("inlineCode",{parentName:"p"},"GenesisState")," from a given seed."),(0,o.kt)("p",null,"Once the module genesis parameter are generated randomly (or with the key and\nvalues defined in a ",(0,o.kt)("inlineCode",{parentName:"p"},"params")," file), they are marshaled to JSON format and added\nto the app genesis JSON to use it on the simulations."),(0,o.kt)("p",null,"You can check an example on how to create the randomized genesis ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/blob/main/x/staking/simulation/genesis.go"},"here"),"."),(0,o.kt)("h3",{id:"random-weighted-operations"},"Random weighted operations"),(0,o.kt)("p",null,"Operations are one of the crucial parts of the Cosmos SDK simulation. They are the transactions\n(",(0,o.kt)("inlineCode",{parentName:"p"},"Msg"),") that are simulated with random field values. The sender of the operation\nis also assigned randomly."),(0,o.kt)("p",null,"Operations on the simulation are simulated using the full ",(0,o.kt)("a",{parentName:"p",href:"/main/learn/advanced/transactions"},"transaction cycle")," of a\n",(0,o.kt)("inlineCode",{parentName:"p"},"ABCI")," application that exposes the ",(0,o.kt)("inlineCode",{parentName:"p"},"BaseApp"),"."),(0,o.kt)("p",null,"Shown below is how weights are set:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/23cf89cce1882ba9c8280e64735ae200504bfdce/x/staking/depinject.go#L144-L154\n")),(0,o.kt)("p",null,"As you can see, the weights are predefined in this case. Options exist to override this behavior with different weights. One option is to use ",(0,o.kt)("inlineCode",{parentName:"p"},"*rand.Rand")," to define a random weight for the operation, or you can inject your own predefined weights."),(0,o.kt)("p",null,"The SDK simulations can be executed like normal tests in Go from the shell or within an IDE.\nMake sure that you pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"-tags='sims")," parameter to enable them and other params that make sense for your scenario."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/23cf89cce1882ba9c8280e64735ae200504bfdce/scripts/build/simulations.mk#L19\n")),(0,o.kt)("h3",{id:"random-proposal-contents"},"Random proposal contents"),(0,o.kt)("p",null,"Randomized governance proposals are also supported on the Cosmos SDK simulator. Each\nmodule must register the message to be used for governance proposals.  "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/23cf89cce1882ba9c8280e64735ae200504bfdce/x/staking/depinject.go#L139-L142\n")),(0,o.kt)("h2",{id:"registering-simulation-functions"},"Registering simulation functions"),(0,o.kt)("p",null,"Now that all the required functions are defined, we need to integrate them into the module pattern within the ",(0,o.kt)("inlineCode",{parentName:"p"},"module.go"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/23cf89cce1882ba9c8280e64735ae200504bfdce/x/staking/depinject.go#L127-L154\n")),(0,o.kt)("h2",{id:"app-simulator-manager"},"App Simulator manager"),(0,o.kt)("p",null,"The following step is setting up the ",(0,o.kt)("inlineCode",{parentName:"p"},"SimulatorManager")," at the app level. This\nis required for the simulation test files on the next step."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type CustomApp struct {\n  ...\n  sm *module.SimulationManager\n}\n")),(0,o.kt)("p",null,"Then at the instantiation of the application, we create the ",(0,o.kt)("inlineCode",{parentName:"p"},"SimulationManager"),"\ninstance in the same way we create the ",(0,o.kt)("inlineCode",{parentName:"p"},"ModuleManager")," but this time we only pass\nthe modules that implement the simulation functions from the ",(0,o.kt)("inlineCode",{parentName:"p"},"AppModuleSimulation"),"\ninterface described above."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func NewCustomApp(...) {\n  // create the simulation manager and define the order of the modules for deterministic simulations\n  app.sm = module.NewSimulationManager(\n    auth.NewAppModule(app.accountKeeper),\n    bank.NewAppModule(app.bankKeeper, app.accountKeeper),\n    supply.NewAppModule(app.supplyKeeper, app.accountKeeper),\n    gov.NewAppModule(app.govKeeper, app.accountKeeper, app.supplyKeeper),\n    mint.NewAppModule(app.mintKeeper),\n    distr.NewAppModule(app.distrKeeper, app.accountKeeper, app.supplyKeeper, app.stakingKeeper),\n    staking.NewAppModule(cdc, app.stakingKeeper),\n    slashing.NewAppModule(app.slashingKeeper, app.accountKeeper, app.stakingKeeper),\n  )\n\n  // register the store decoders for simulation tests\n  app.sm.RegisterStoreDecoders()\n  ...\n}\n")),(0,o.kt)("h2",{id:"integration-with-the-go-fuzzer-framework"},"Integration with the Go fuzzer framework"),(0,o.kt)("p",null,"The simulations provide deterministic behaviour already. The integration with the ",(0,o.kt)("a",{parentName:"p",href:"https://go.dev/doc/security/fuzz/"},"Go fuzzer"),"\ncan be done at a high level with the deterministic pseudo random number generator where the fuzzer provides varying numbers. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/23cf89cce1882ba9c8280e64735ae200504bfdce/scripts/build/simulations.mk#L80-L84\n")))}d.isMDXComponent=!0}}]);