"use strict";(self.webpackChunkcosmos_sdk_docs=self.webpackChunkcosmos_sdk_docs||[]).push([[29980],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=i.createContext({}),p=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(o.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),g=a,m=u["".concat(o,".").concat(g)]||u[g]||d[g]||l;return n?i.createElement(m,r(r({ref:t},c),{},{components:n})):i.createElement(m,r({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=g;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[u]="string"==typeof e?e:a,r[1]=s;for(var p=2;p<l;p++)r[p]=n[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},34001:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var i=n(87462),a=(n(67294),n(3905));const l={},r="x/genutil",s={unversionedId:"build/modules/genutil/README",id:"version-0.52/build/modules/genutil/README",title:"x/genutil",description:"Concepts",source:"@site/versioned_docs/version-0.52/build/modules/genutil/README.md",sourceDirName:"build/modules/genutil",slug:"/build/modules/genutil/",permalink:"/v0.52/build/modules/genutil/",draft:!1,tags:[],version:"0.52",frontMatter:{},sidebar:"buildSidebar",previous:{title:"x/circuit",permalink:"/v0.52/build/modules/circuit/"},next:{title:"x/validate",permalink:"/v0.52/build/modules/validate/"}},o={},p=[{value:"Concepts",id:"concepts",level:2},{value:"Genesis",id:"genesis",level:2},{value:"Client",id:"client",level:2},{value:"CLI",id:"cli",level:3},{value:"add-genesis-account",id:"add-genesis-account",level:4},{value:"collect-gentxs",id:"collect-gentxs",level:4},{value:"gentx",id:"gentx",level:4},{value:"migrate",id:"migrate",level:4},{value:"validate-genesis",id:"validate-genesis",level:4},{value:"export",id:"export",level:4}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"xgenutil"},(0,a.kt)("inlineCode",{parentName:"h1"},"x/genutil")),(0,a.kt)("h2",{id:"concepts"},"Concepts"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"genutil")," package contains a variety of genesis utility functionalities for usage within a blockchain application. Namely:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Genesis transactions related (gentx)"),(0,a.kt)("li",{parentName:"ul"},"Commands for collection and creation of gentxs"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"InitChain")," processing of gentxs"),(0,a.kt)("li",{parentName:"ul"},"Genesis file creation"),(0,a.kt)("li",{parentName:"ul"},"Genesis file validation"),(0,a.kt)("li",{parentName:"ul"},"Genesis file migration"),(0,a.kt)("li",{parentName:"ul"},"CometBFT related initialization",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Translation of an app genesis to a CometBFT genesis"))),(0,a.kt)("li",{parentName:"ul"},"Application state export into a genesis file")),(0,a.kt)("h2",{id:"genesis"},"Genesis"),(0,a.kt)("p",null,"Genutil contains the data structure that defines an application genesis.\nAn application genesis consist of a consensus genesis (g.e. CometBFT genesis) and application related genesis data."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-rc.0/x/genutil/types/genesis.go#L24-L34\n")),(0,a.kt)("p",null,"The application genesis can then be translated to the consensus engine to the right format:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-rc.0/x/genutil/types/genesis.go#L126-L136\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-rc.0/server/start.go#L397-L407\n")),(0,a.kt)("h2",{id:"client"},"Client"),(0,a.kt)("h3",{id:"cli"},"CLI"),(0,a.kt)("p",null,"The genutil commands are available under the ",(0,a.kt)("inlineCode",{parentName:"p"},"genesis")," subcommand."),(0,a.kt)("h4",{id:"add-genesis-account"},"add-genesis-account"),(0,a.kt)("p",null,"Add a genesis account to ",(0,a.kt)("inlineCode",{parentName:"p"},"genesis.json"),". Learn more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cosmos.network/main/run-node/run-node#adding-genesis-accounts"},"here"),"."),(0,a.kt)("h4",{id:"collect-gentxs"},"collect-gentxs"),(0,a.kt)("p",null,"Collect genesis txs and output a ",(0,a.kt)("inlineCode",{parentName:"p"},"genesis.json")," file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"simd genesis collect-gentxs\n")),(0,a.kt)("p",null,"This will create a new ",(0,a.kt)("inlineCode",{parentName:"p"},"genesis.json"),' file that includes data from all the validators (we sometimes call it the "super genesis file" to distinguish it from single-validator genesis files).'),(0,a.kt)("h4",{id:"gentx"},"gentx"),(0,a.kt)("p",null,"Generate a genesis tx carrying a self delegation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"simd genesis gentx [key_name] [amount] --chain-id [chain-id]\n")),(0,a.kt)("p",null,"This will create the genesis transaction for your new chain. Here ",(0,a.kt)("inlineCode",{parentName:"p"},"amount")," should be at least ",(0,a.kt)("inlineCode",{parentName:"p"},"1000000000stake"),".\nIf you provide too much or too little, you will encounter an error when starting a node."),(0,a.kt)("h4",{id:"migrate"},"migrate"),(0,a.kt)("p",null,"Migrate genesis to a specified target (SDK) version."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"simd genesis migrate [target-version]\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"migrate")," command is extensible and takes a ",(0,a.kt)("inlineCode",{parentName:"p"},"MigrationMap"),". This map is a mapping of target versions to genesis migrations functions.\nWhen not using the default ",(0,a.kt)("inlineCode",{parentName:"p"},"MigrationMap"),", it is recommended to still call the default ",(0,a.kt)("inlineCode",{parentName:"p"},"MigrationMap")," corresponding the SDK version of the chain and prepend/append your own genesis migrations.")),(0,a.kt)("h4",{id:"validate-genesis"},"validate-genesis"),(0,a.kt)("p",null,"Validates the genesis file at the default location or at the location passed as an argument."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"simd genesis validate-genesis\n")),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Validate genesis only validates if the genesis is valid at the ",(0,a.kt)("strong",{parentName:"p"},"current application binary"),". For validating a genesis from a previous version of the application, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"migrate")," command to migrate the genesis to the current version.")),(0,a.kt)("h4",{id:"export"},"export"),(0,a.kt)("p",null,"Export state to genesis file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"simd genesis export\n")),(0,a.kt)("p",null,"Some flags are available to customize the export:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--for-zero-height"),": export the genesis file for a chain with zero height"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--height [height]"),": export the genesis file for a chain with a given height")),(0,a.kt)("p",null,"Read the help for more information."))}d.isMDXComponent=!0}}]);